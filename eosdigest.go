/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: leafDigest.i

package eosdigest

/*
#define intgo swig_intgo
typedef void *swig_voidp;

#include <stdint.h>


typedef long long intgo;
typedef unsigned long long uintgo;



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;


typedef long long swig_type_1;
typedef long long swig_type_2;
typedef long long swig_type_3;
typedef long long swig_type_4;
typedef _gostring_ swig_type_5;
typedef _gostring_ swig_type_6;
typedef _gostring_ swig_type_7;
typedef long long swig_type_8;
typedef long long swig_type_9;
typedef long long swig_type_10;
typedef long long swig_type_11;
typedef _gostring_ swig_type_12;
typedef _gostring_ swig_type_13;
typedef _gostring_ swig_type_14;
extern void _wrap_Swig_free_eosdigest_c7ff37f9a1eb71a5(uintptr_t arg1);
extern uintptr_t _wrap_Swig_malloc_eosdigest_c7ff37f9a1eb71a5(swig_intgo arg1);
extern uintptr_t _wrap_new_StringVector__SWIG_0_eosdigest_c7ff37f9a1eb71a5(void);
extern uintptr_t _wrap_new_StringVector__SWIG_1_eosdigest_c7ff37f9a1eb71a5(swig_type_1 arg1);
extern swig_type_2 _wrap_StringVector_size_eosdigest_c7ff37f9a1eb71a5(uintptr_t arg1);
extern swig_type_3 _wrap_StringVector_capacity_eosdigest_c7ff37f9a1eb71a5(uintptr_t arg1);
extern void _wrap_StringVector_reserve_eosdigest_c7ff37f9a1eb71a5(uintptr_t arg1, swig_type_4 arg2);
extern _Bool _wrap_StringVector_isEmpty_eosdigest_c7ff37f9a1eb71a5(uintptr_t arg1);
extern void _wrap_StringVector_clear_eosdigest_c7ff37f9a1eb71a5(uintptr_t arg1);
extern void _wrap_StringVector_add_eosdigest_c7ff37f9a1eb71a5(uintptr_t arg1, swig_type_5 arg2);
extern swig_type_6 _wrap_StringVector_get_eosdigest_c7ff37f9a1eb71a5(uintptr_t arg1, swig_intgo arg2);
extern void _wrap_StringVector_set_eosdigest_c7ff37f9a1eb71a5(uintptr_t arg1, swig_intgo arg2, swig_type_7 arg3);
extern void _wrap_delete_StringVector_eosdigest_c7ff37f9a1eb71a5(uintptr_t arg1);
extern uintptr_t _wrap_new_UCharVector__SWIG_0_eosdigest_c7ff37f9a1eb71a5(void);
extern uintptr_t _wrap_new_UCharVector__SWIG_1_eosdigest_c7ff37f9a1eb71a5(swig_type_8 arg1);
extern swig_type_9 _wrap_UCharVector_size_eosdigest_c7ff37f9a1eb71a5(uintptr_t arg1);
extern swig_type_10 _wrap_UCharVector_capacity_eosdigest_c7ff37f9a1eb71a5(uintptr_t arg1);
extern void _wrap_UCharVector_reserve_eosdigest_c7ff37f9a1eb71a5(uintptr_t arg1, swig_type_11 arg2);
extern _Bool _wrap_UCharVector_isEmpty_eosdigest_c7ff37f9a1eb71a5(uintptr_t arg1);
extern void _wrap_UCharVector_clear_eosdigest_c7ff37f9a1eb71a5(uintptr_t arg1);
extern void _wrap_UCharVector_add_eosdigest_c7ff37f9a1eb71a5(uintptr_t arg1, char arg2);
extern char _wrap_UCharVector_get_eosdigest_c7ff37f9a1eb71a5(uintptr_t arg1, swig_intgo arg2);
extern void _wrap_UCharVector_set_eosdigest_c7ff37f9a1eb71a5(uintptr_t arg1, swig_intgo arg2, char arg3);
extern void _wrap_delete_UCharVector_eosdigest_c7ff37f9a1eb71a5(uintptr_t arg1);
extern swig_type_12 _wrap_eosServializationTxDigest_eosdigest_c7ff37f9a1eb71a5(swig_type_13 arg1, swig_intgo arg2, swig_intgo arg3, swig_type_14 arg4, uintptr_t arg5, uintptr_t arg6, uintptr_t arg7);
#undef intgo
#cgo LDFLAGS: -L ./lib/openssl/lib -l crypto
#cgo CXXFLAGS: -std=c++11 
*/
import "C"

import (
	_ "runtime/cgo"
	"sync"
	"unsafe"
)

type _ unsafe.Pointer

var Swig_escape_always_false bool
var Swig_escape_val interface{}

type _swig_fnptr *byte
type _swig_memberptr *byte

type _ sync.Mutex

type swig_gostring struct {
	p uintptr
	n int
}

func swigCopyString(s string) string {
	p := *(*swig_gostring)(unsafe.Pointer(&s))
	r := string((*[0x7fffffff]byte)(unsafe.Pointer(p.p))[:p.n])
	Swig_free(p.p)
	return r
}

func Swig_free(arg1 uintptr) {
	_swig_i_0 := arg1
	C._wrap_Swig_free_eosdigest_c7ff37f9a1eb71a5(C.uintptr_t(_swig_i_0))
}

func Swig_malloc(arg1 int) (_swig_ret uintptr) {
	var swig_r uintptr
	_swig_i_0 := arg1
	swig_r = (uintptr)(C._wrap_Swig_malloc_eosdigest_c7ff37f9a1eb71a5(C.swig_intgo(_swig_i_0)))
	return swig_r
}

type SwigcptrStringVector uintptr

func (p SwigcptrStringVector) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrStringVector) SwigIsStringVector() {
}

func NewStringVector__SWIG_0() (_swig_ret StringVector) {
	var swig_r StringVector
	swig_r = (StringVector)(SwigcptrStringVector(C._wrap_new_StringVector__SWIG_0_eosdigest_c7ff37f9a1eb71a5()))
	return swig_r
}

func NewStringVector__SWIG_1(arg1 int64) (_swig_ret StringVector) {
	var swig_r StringVector
	_swig_i_0 := arg1
	swig_r = (StringVector)(SwigcptrStringVector(C._wrap_new_StringVector__SWIG_1_eosdigest_c7ff37f9a1eb71a5(C.swig_type_1(_swig_i_0))))
	return swig_r
}

func NewStringVector(a ...interface{}) StringVector {
	argc := len(a)
	if argc == 0 {
		return NewStringVector__SWIG_0()
	}
	if argc == 1 {
		return NewStringVector__SWIG_1(a[0].(int64))
	}
	panic("No match for overloaded function call")
}

func (arg1 SwigcptrStringVector) Size() (_swig_ret int64) {
	var swig_r int64
	_swig_i_0 := arg1
	swig_r = (int64)(C._wrap_StringVector_size_eosdigest_c7ff37f9a1eb71a5(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrStringVector) Capacity() (_swig_ret int64) {
	var swig_r int64
	_swig_i_0 := arg1
	swig_r = (int64)(C._wrap_StringVector_capacity_eosdigest_c7ff37f9a1eb71a5(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrStringVector) Reserve(arg2 int64) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	C._wrap_StringVector_reserve_eosdigest_c7ff37f9a1eb71a5(C.uintptr_t(_swig_i_0), C.swig_type_4(_swig_i_1))
}

func (arg1 SwigcptrStringVector) IsEmpty() (_swig_ret bool) {
	var swig_r bool
	_swig_i_0 := arg1
	swig_r = (bool)(C._wrap_StringVector_isEmpty_eosdigest_c7ff37f9a1eb71a5(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrStringVector) Clear() {
	_swig_i_0 := arg1
	C._wrap_StringVector_clear_eosdigest_c7ff37f9a1eb71a5(C.uintptr_t(_swig_i_0))
}

func (arg1 SwigcptrStringVector) Add(arg2 string) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	C._wrap_StringVector_add_eosdigest_c7ff37f9a1eb71a5(C.uintptr_t(_swig_i_0), *(*C.swig_type_5)(unsafe.Pointer(&_swig_i_1)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
}

func (arg1 SwigcptrStringVector) Get(arg2 int) (_swig_ret string) {
	var swig_r string
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r_p := C._wrap_StringVector_get_eosdigest_c7ff37f9a1eb71a5(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1))
	swig_r = *(*string)(unsafe.Pointer(&swig_r_p))
	var swig_r_1 string
	swig_r_1 = swigCopyString(swig_r)
	return swig_r_1
}

func (arg1 SwigcptrStringVector) Set(arg2 int, arg3 string) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	C._wrap_StringVector_set_eosdigest_c7ff37f9a1eb71a5(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1), *(*C.swig_type_7)(unsafe.Pointer(&_swig_i_2)))
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
}

func DeleteStringVector(arg1 StringVector) {
	_swig_i_0 := arg1.Swigcptr()
	C._wrap_delete_StringVector_eosdigest_c7ff37f9a1eb71a5(C.uintptr_t(_swig_i_0))
}

type StringVector interface {
	Swigcptr() uintptr
	SwigIsStringVector()
	Size() (_swig_ret int64)
	Capacity() (_swig_ret int64)
	Reserve(arg2 int64)
	IsEmpty() (_swig_ret bool)
	Clear()
	Add(arg2 string)
	Get(arg2 int) (_swig_ret string)
	Set(arg2 int, arg3 string)
}

type SwigcptrUCharVector uintptr

func (p SwigcptrUCharVector) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrUCharVector) SwigIsUCharVector() {
}

func NewUCharVector__SWIG_0() (_swig_ret UCharVector) {
	var swig_r UCharVector
	swig_r = (UCharVector)(SwigcptrUCharVector(C._wrap_new_UCharVector__SWIG_0_eosdigest_c7ff37f9a1eb71a5()))
	return swig_r
}

func NewUCharVector__SWIG_1(arg1 int64) (_swig_ret UCharVector) {
	var swig_r UCharVector
	_swig_i_0 := arg1
	swig_r = (UCharVector)(SwigcptrUCharVector(C._wrap_new_UCharVector__SWIG_1_eosdigest_c7ff37f9a1eb71a5(C.swig_type_8(_swig_i_0))))
	return swig_r
}

func NewUCharVector(a ...interface{}) UCharVector {
	argc := len(a)
	if argc == 0 {
		return NewUCharVector__SWIG_0()
	}
	if argc == 1 {
		return NewUCharVector__SWIG_1(a[0].(int64))
	}
	panic("No match for overloaded function call")
}

func (arg1 SwigcptrUCharVector) Size() (_swig_ret int64) {
	var swig_r int64
	_swig_i_0 := arg1
	swig_r = (int64)(C._wrap_UCharVector_size_eosdigest_c7ff37f9a1eb71a5(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrUCharVector) Capacity() (_swig_ret int64) {
	var swig_r int64
	_swig_i_0 := arg1
	swig_r = (int64)(C._wrap_UCharVector_capacity_eosdigest_c7ff37f9a1eb71a5(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrUCharVector) Reserve(arg2 int64) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	C._wrap_UCharVector_reserve_eosdigest_c7ff37f9a1eb71a5(C.uintptr_t(_swig_i_0), C.swig_type_11(_swig_i_1))
}

func (arg1 SwigcptrUCharVector) IsEmpty() (_swig_ret bool) {
	var swig_r bool
	_swig_i_0 := arg1
	swig_r = (bool)(C._wrap_UCharVector_isEmpty_eosdigest_c7ff37f9a1eb71a5(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrUCharVector) Clear() {
	_swig_i_0 := arg1
	C._wrap_UCharVector_clear_eosdigest_c7ff37f9a1eb71a5(C.uintptr_t(_swig_i_0))
}

func (arg1 SwigcptrUCharVector) Add(arg2 byte) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	C._wrap_UCharVector_add_eosdigest_c7ff37f9a1eb71a5(C.uintptr_t(_swig_i_0), C.char(_swig_i_1))
}

func (arg1 SwigcptrUCharVector) Get(arg2 int) (_swig_ret byte) {
	var swig_r byte
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (byte)(C._wrap_UCharVector_get_eosdigest_c7ff37f9a1eb71a5(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1)))
	return swig_r
}

func (arg1 SwigcptrUCharVector) Set(arg2 int, arg3 byte) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	C._wrap_UCharVector_set_eosdigest_c7ff37f9a1eb71a5(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1), C.char(_swig_i_2))
}

func DeleteUCharVector(arg1 UCharVector) {
	_swig_i_0 := arg1.Swigcptr()
	C._wrap_delete_UCharVector_eosdigest_c7ff37f9a1eb71a5(C.uintptr_t(_swig_i_0))
}

type UCharVector interface {
	Swigcptr() uintptr
	SwigIsUCharVector()
	Size() (_swig_ret int64)
	Capacity() (_swig_ret int64)
	Reserve(arg2 int64)
	IsEmpty() (_swig_ret bool)
	Clear()
	Add(arg2 byte)
	Get(arg2 int) (_swig_ret byte)
	Set(arg2 int, arg3 byte)
}

func EosServializationTxDigest(arg1 string, arg2 uint, arg3 uint, arg4 string, arg5 Vector_Sl_unsigned_SS_char_Sg_, arg6 Vector_Sl_std_string_Sg_, arg7 Vector_Sl_unsigned_SS_char_Sg_) (_swig_ret string) {
	var swig_r string
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5.Swigcptr()
	_swig_i_5 := arg6.Swigcptr()
	_swig_i_6 := arg7.Swigcptr()
	swig_r_p := C._wrap_eosServializationTxDigest_eosdigest_c7ff37f9a1eb71a5(*(*C.swig_type_13)(unsafe.Pointer(&_swig_i_0)), C.swig_intgo(_swig_i_1), C.swig_intgo(_swig_i_2), *(*C.swig_type_14)(unsafe.Pointer(&_swig_i_3)), C.uintptr_t(_swig_i_4), C.uintptr_t(_swig_i_5), C.uintptr_t(_swig_i_6))
	swig_r = *(*string)(unsafe.Pointer(&swig_r_p))
	if Swig_escape_always_false {
		Swig_escape_val = arg1
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg4
	}
	var swig_r_1 string
	swig_r_1 = swigCopyString(swig_r)
	return swig_r_1
}

type SwigcptrVector_Sl_unsigned_SS_char_Sg_ uintptr
type Vector_Sl_unsigned_SS_char_Sg_ interface {
	Swigcptr() uintptr
}

func (p SwigcptrVector_Sl_unsigned_SS_char_Sg_) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrVector_Sl_std_string_Sg_ uintptr
type Vector_Sl_std_string_Sg_ interface {
	Swigcptr() uintptr
}

func (p SwigcptrVector_Sl_std_string_Sg_) Swigcptr() uintptr {
	return uintptr(p)
}

var swigDirectorTrack struct {
	sync.Mutex
	m map[int]interface{}
	c int
}

func swigDirectorAdd(v interface{}) int {
	swigDirectorTrack.Lock()
	defer swigDirectorTrack.Unlock()
	if swigDirectorTrack.m == nil {
		swigDirectorTrack.m = make(map[int]interface{})
	}
	swigDirectorTrack.c++
	ret := swigDirectorTrack.c
	swigDirectorTrack.m[ret] = v
	return ret
}

func swigDirectorLookup(c int) interface{} {
	swigDirectorTrack.Lock()
	defer swigDirectorTrack.Unlock()
	ret := swigDirectorTrack.m[c]
	if ret == nil {
		panic("C++ director pointer not found (possible	use-after-free)")
	}
	return ret
}

func swigDirectorDelete(c int) {
	swigDirectorTrack.Lock()
	defer swigDirectorTrack.Unlock()
	if swigDirectorTrack.m[c] == nil {
		if c > swigDirectorTrack.c {
			panic("C++ director pointer invalid (possible memory corruption")
		} else {
			panic("C++ director pointer not found (possible use-after-free)")
		}
	}
	delete(swigDirectorTrack.m, c)
}
